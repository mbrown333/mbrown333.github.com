<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Matthew Brown's JS Blog]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://github.com/mbrown333/mbrown333.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sat, 09 Jun 2018 18:59:45 GMT</lastBuildDate><item><title><![CDATA[Immutability in Javascript]]></title><description><![CDATA[I’m currently working on a project that uses React and Redux.  Both of these js libraries enforce immutability of objects as they won’t let…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180608-immutability-in-javascript/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180608-immutability-in-javascript/</guid><pubDate>Fri, 08 Jun 2018 22:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’m currently working on a project that uses React and Redux.  Both of these js libraries enforce immutability of objects as they won’t let you mutate state.  I’m going to discuss exactly what that means and show examples of how to achieve immutability cleanly with ES6 features.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s the simple truth: you can’t innovate on products without first innovating the way you build them.
— Alex Schleifer, The Way We Build&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Immutable vs Mutable&lt;/h2&gt;
&lt;p&gt;Let’s start with the basic definition.  &lt;em&gt;Immutable&lt;/em&gt; means once an object is assigned to a variable it doesn’t change.  So when you want to change state in React or Redux you don’t mutate an object in state.  Instead you build a new object instead and that new object reference replaces the old as the current state.  Achieving this can seem difficult if you aren’t up to speed with modern js practices.  This is much easier to achieve using ES6 features which I will demonstrate below.&lt;/p&gt;
&lt;p&gt;Strings in Javascript are immutable objects.  If you add one string to another it does not change the current string.  It will create a new string object and assign the reference to the variable storing the result.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Immutable data cannot be changed once created, leading to much simpler application development, no defensive copying, and enabling advanced memoization and change detection techniques with simple logic. Persistent data presents a mutative API which does not update the data in-place, but instead always yields new updated data.
— Immutable.js page&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Mutable&lt;/em&gt; is just the opposite.  You have an object reference in memory and when the state of the app changes you update properties of that object to reflect the new state.  Achieving this in Javascript is very easy.  However there are drawbacks.  I know it has been my experience that as projects grow the amount of state that is held in the app grows along with it.  As this is happening the number of bugs that are difficult to resolve start to increase.  Usually the issue is the objects kept in the state are being mutated in several different places which makes it hard to track exactly where to fix it.  And if it does fix one bug then how many others does it create simultaneously?&lt;/p&gt;
&lt;p&gt;This is the main advantage of making sure objects in state are immutable.  I’ve seen in building apps this way that it makes state changes really easy to debug.  Code for state changes is simple and easy to pinpoint if something is not correct.  Especially when &lt;a href=&quot;https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en&quot;&gt;you use the Redux DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s take a look at examples of how to achieve immutability using ES6 features.  The examples will follow the typical Redux reducer pattern.&lt;/p&gt;
&lt;h2&gt;Spread Operator&lt;/h2&gt;
&lt;p&gt;The spread operator is magic in my opinion.  It does a great job of keeping your code concise and saves a lot of work.  Take the example below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initalState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; FETCH_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Rather than assigning &lt;code class=&quot;language-text&quot;&gt;pizzaList&lt;/code&gt; to state we use the spread operator to assign all the properties of state and the &lt;code class=&quot;language-text&quot;&gt;pizzaList&lt;/code&gt; property to a new object reference which is returned by the reducer.  This can also be achieved using &lt;code class=&quot;language-text&quot;&gt;Object.assign&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initalState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; FETCH_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Same result but my preference is to use the spread operator as it keeps things a bit more concise and explicit.  All just personal preference though.&lt;/p&gt;
&lt;p&gt;The same result can be achieved if you want to make the property that is changed dynamic.  The following will assign whichever property that it recieves in &lt;code class=&quot;language-text&quot;&gt;action.field&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initalState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; FETCH_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The spread operator also comes in handy for adding a new item to an array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ADD_PIZZA&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;newPizza&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Arrays - map/filter/reduce&lt;/h2&gt;
&lt;p&gt;It’s also very handy to use ES6 array operations (map/filter/reduce) since they all return new array references.  Let’s take a look at some examples below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updating all items in a list&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; INCREMENT_ALL_PIZZA_ORDER_COUNT&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pizza &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;pizza&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; orderCount&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;orderCount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This constructs a new &lt;code class=&quot;language-text&quot;&gt;pizzaList&lt;/code&gt; by constructing a new object in the map for each item and updating the &lt;code class=&quot;language-text&quot;&gt;orderCount&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Removing an item from a list&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; REMOVE_PIZZA&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pizza &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;removeId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This creates a new array by simply filtering out the object with the id that was removed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updating an item in a list:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ADD_PIZZA&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pizza &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;updateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;updatedPizza&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This updates an item in the list by first filtering out the updated id from the original list and then using the result plus the updated object to return a new array.&lt;/p&gt;
&lt;h2&gt;Immutable JS&lt;/h2&gt;
&lt;p&gt;Facebook has a js library build around immutable principles called immutable.js.  I highly recommend you &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;check out their page if you’d like to learn more&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Much of what makes application development difficult is tracking mutation and maintaining state. Developing with immutable data encourages you to think differently about how data flows through your application.
— Immutable.js page&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We’ve talked about the principles behind immutability and some ES6 tools for achieving it.  Hopefully this gives you a clearer understanding as it an increasingly relevant topic in modern Javascript.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A New Beginning...]]></title><description><![CDATA[New Blog! If you’ve checked out my blog before you’ll likely notice things look pretty different.  I’m currently in the middle of the…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180608-a-new-beginning/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180608-a-new-beginning/</guid><pubDate>Fri, 08 Jun 2018 15:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;New Blog!&lt;/h2&gt;
&lt;p&gt;If you’ve checked out my blog before you’ll likely notice things look pretty different.  I’m currently in the middle of the process of re-platforming my blog away from Wordpress and now will be using Gatsby.  I’ve started the process of porting over my previous posts and will continue to do so until everything has been moved over.&lt;/p&gt;
&lt;h2&gt;Why Gatsby?&lt;/h2&gt;
&lt;p&gt;Good question.&lt;/p&gt;
&lt;p&gt;If you haven’t heard of &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; yet it’s a static site generator that uses React.js.  The main reason I switched to Gatsby is that it is blazing fast.  And it is very easy to use &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; to deploy a Gatsby site to Github pages.  So another win is that hosting will be free.  Not that it was a lot before, but free beats cheap in my book.&lt;/p&gt;
&lt;p&gt;If you are interested in learning to do this yourself &lt;a href=&quot;https://medium.freecodecamp.org/how-to-write-a-blog-using-gatsby-from-your-phone-e92a99851a04&quot;&gt;I recommend you check out this article for details on how&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Stay Tuned&lt;/h2&gt;
&lt;p&gt;One of the reasons I’m excited about this move is it makes it much easier for me to deliver new content as I can focus less on administration and more on creating content.  So keep an eye out for more coming soon!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functional Stateless Components in React]]></title><description><![CDATA[In this article I’m going to explain functional stateless React components using simple code examples. Now this may sound abstract, but the…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180409-functional-stateless-components-in-react/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180409-functional-stateless-components-in-react/</guid><pubDate>Mon, 09 Apr 2018 22:02:52 GMT</pubDate><content:encoded>&lt;p&gt;In this article I’m going to explain functional stateless React components using simple code examples. Now this may sound abstract, but the idea behind this is very simple. The idea is that functional stateless components are just displaying data that is passed to them through props. That is it. No state, no methods, just plugging data into a template and returning a component to render.&lt;/p&gt;
&lt;p&gt;When you see components in React they are normally declared in one of two ways. The first extends &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class FancyComponent extends React.Component { 
    constructor(props) { 
      super(props); 
    } 
    ...
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The example uses ES6 class notation to extend &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt;. You use this method when you are creating a component that does one of the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses state&lt;/li&gt;
&lt;li&gt;Uses a life cycle method (i.e. &lt;em&gt;componentDidMount&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In all likelihood you will be using the class approach for your container Components that hold a fair amount of logic and are composed of presentational components. For the lower level building blocks you can simply declare a function that returns the component that you want to display like the following example. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function NotSoFancyComponent(props) { 
  const { name, city, } = props; 
  return &amp;lt;div&amp;gt;Hello, {name} from {city}!&amp;lt;/div&amp;gt; 
} &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the &lt;code class=&quot;language-text&quot;&gt;NotSoFancyComponent&lt;/code&gt; we deconstruct the &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; object into the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;city&lt;/code&gt; constants. &lt;em&gt;(You don’t have to do it this way. It is perfectly fine to use {props.name} that is just my preference.)&lt;/em&gt; This is an example of a functional stateless component. No state, no life cycle methods required. Just taking in data as props and plugging it into a component. &lt;/p&gt;
&lt;p&gt;We would use the component as follows. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;NotSoFancyComponent name=&amp;quot;Bob&amp;quot; city=&amp;quot;Kansas City&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We can also make this declaration more succinct using an ES6 arrow function. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const NotSoFancyComponent = (props) =&amp;gt; &amp;lt;div&amp;gt;Hello, {props.name} from {props.city}!&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The nice thing about keeping these components very simple is they can easily be re-used across your application or possibly multiple applications in a component library and you can be assured that they will display the same behavior everywhere. Cleaner code and better performance are two additional benefits to using this approach. &lt;/p&gt;
&lt;p&gt;And if you happen to come to a point where you need to use state or a life cycle method it is very easy to refactor these functions to do so. Let’s say we want to leverage the &lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt; life cycle hook with our example. This is the code changes we would need to make to make it work. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class NotSoFancyComponent extends React.Component { 
  constructor(props) { 
    super(props); 
  } 
  
  componentDidMount() { 
    console.log(&amp;#39;NotSoFancyComponent did mount!&amp;#39;); 
  } 
  
  render() { 
    const { name, city, } = this.props; return &amp;lt;div&amp;gt;Hello, {name} from {city}!&amp;lt;/div&amp;gt; 
  } 
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;No drastic changes required. The declaration changes to a class extending &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt; and then move the function into the render function. &lt;/p&gt;
&lt;p&gt;I hope this enhances your understanding of functional stateless components as it is a foundational concept for building applications in React.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript's call, bind, and apply - A Quick Explanation]]></title><description><![CDATA[If you don’t use JavaScript’s call, bind, and apply regularly you might not be aware of what they do and how to use these native functions…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180409-javascripts-call-bind-and-apply-a-quick-explanation/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180409-javascripts-call-bind-and-apply-a-quick-explanation/</guid><pubDate>Mon, 09 Apr 2018 03:20:04 GMT</pubDate><content:encoded>&lt;p&gt;If you don’t use JavaScript’s call, bind, and apply regularly you might not be aware of what they do and how to use these native functions. I can remember for the longest time being aware they existed, but not really understanding what they were exactly. Having a good grasp on how these work will give you a deeper understanding of the JavaScript language. And if nothing else these functions tend to be a popular subject of JavaScript interview questions so being aware of how they work can still help you out even if you don’t use them regularly. &lt;/p&gt;
&lt;p&gt;Bind, call, and apply are all part of the prototype object for all JavaScript functions. The reason these calls can come in handy is JavaScript’s &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;. Let’s take a look at some code. When you’re calling an object’s function and the object is the left of the dot as below then that object will be &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; when the &lt;code class=&quot;language-text&quot;&gt;printPerson&lt;/code&gt; function is called. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
    printPerson() { 
      console.log(`${this.name} is ${this.age}`); 
      } 
    }; 

    person.printPerson(); // Bob is 21 
})(); &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This works fine if you’re working with objects in an object oriented fashion where data and functionality are grouped together in the object. If you’re using a functional approach then this changes things. If we move the &lt;code class=&quot;language-text&quot;&gt;printPerson&lt;/code&gt; function out of the &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt; object and declare it as a function elsewhere then we’ve lost the ability to use &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; in the function. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
  }; 
  
  function printPerson() { 
    console.log(`${this.name} is ${this.age}`); 
  } 
  
  printPerson(); // FAILS! 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We could change the function to pass in person as a parameter or we can use &lt;code class=&quot;language-text&quot;&gt;call&lt;/code&gt; to specify to the function what the &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; context should be. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Bob&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;printPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
  
  printPerson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Bob is 21 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And voila, we passed in the &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt; object and our &lt;code class=&quot;language-text&quot;&gt;printPerson&lt;/code&gt; function now knows to use this object as the &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; context. You can also pass parameters in addition to the context with call as below. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
  };

  function printPerson(city, state) { 
    console.log(`${this.name} is ${this.age} from ${city}, ${state}`); 
  }

  printPerson.call(person, &amp;#39;Chicago&amp;#39;, &amp;#39;IL&amp;#39;); // Bob is 21 from Chicago, IL 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is the same thing as before just demonstrating that any number of parameters can be passed in after the context. The context is always the first parameter and then all others follow after.&lt;/p&gt;
&lt;p&gt;That’s the basic idea with call, now what about bind?&lt;/p&gt;
&lt;p&gt;Bind is actually pretty much the same as call except the function won’t be invoked immediately. It’s just a way to defer execution until later. If you’ve used React this will look familiar to you as bind is often used to bind functions to React Components.&lt;/p&gt;
&lt;p&gt;Let’s update our code example to use bind this time. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
  }; 
  const printPersonDeferred = printPerson.bind(person); 
  
  function printPerson() { 
    console.log(`${this.name} is ${this.age}`); 
  } 
  
  printPersonDeferred(); // Bob is 21 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And then expand on this to demonstrate parameters. This time we pass the parameters in when we make the deferred execution call rather than at the time bind is called. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { age: 21, name: &amp;#39;Bob&amp;#39;, }; 
  
  const printPersonDeferred = printPerson.bind(person); 
  
  function printPerson(city, state) { 
    console.log(`${this.name} is ${this.age} from ${city}, ${state}`); 
  } 
  
  printPersonDeferred(&amp;#39;Chicago&amp;#39;, &amp;#39;IL&amp;#39;); // Bob is 21 from Chicago, IL 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;All right we have bind and call down. Let’s move on to apply. Apply is practically the same as call except apply requires you to pass in your parameters after the this context as an array. This is how we would need to modify our code to use apply below. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { age: 21, name: &amp;#39;Bob&amp;#39;, }; 
  
  function printPerson(city, state) { 
    console.log(`${this.name} is ${this.age} from ${city}, ${state}`); 
  } 
  
  printPerson.apply(person, [&amp;#39;Chicago&amp;#39;, &amp;#39;IL&amp;#39;]); // Bob is 21 from Chicago, IL 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So you see when you use apply JavaScript unpacks your arguments array into the parameter variables of the function you are calling with apply.&lt;/p&gt;</content:encoded></item></channel></rss>