<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Matthew Brown's JS Blog]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://github.com/mbrown333/mbrown333.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 22 Jun 2018 03:44:09 GMT</lastBuildDate><item><title><![CDATA[Functional Programming]]></title><description><![CDATA[In this article I’m going to discuss the functional programming paradigm and the benefits of using that paradigm in your code.  I’ll be…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180621-functional-programming/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180621-functional-programming/</guid><pubDate>Thu, 21 Jun 2018 06:30:00 GMT</pubDate><content:encoded>&lt;p&gt;In this article I’m going to discuss the functional programming paradigm and the benefits of using that paradigm in your code.  I’ll be covering the core functional programming concepts along with higher order functions, functional composition, and pure functions.  &lt;/p&gt;
&lt;p&gt;Functional programming has been growing in popularity in the last few years.  I work on a team that follows functional programming and have found it to be an effective approach for building web applications with React and Redux.  &lt;/p&gt;
&lt;p&gt;If you haven’t worked in fp before it can take a little while to catch on because you have to think about how you do things differently.  But as I’ll show in this article none of the concepts behind functional programming are overly complicated to understand.&lt;/p&gt;
&lt;p&gt;Let’s dive in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Object-oriented programming makes code understandable by encapsulating moving parts. Functional programming makes code understandable by minimizing moving parts.” -Michael Feathers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;What is functional programming?&lt;/h2&gt;
&lt;p&gt;Let’s start by going over the core principles behind the functional programming paradigm.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t mutate state.&lt;/li&gt;
&lt;li&gt;Avoid shared state.&lt;/li&gt;
&lt;li&gt;Use pure functions with no side effects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, state should not be mutated.  One of the issues with OOP is that state can be mutated anywhere which makes it hard to track down unexpected changes in a program.  Rather the idea is that rather than mutating existing objects in state you should use the previous state and pure functions to calculate what the next state will be.&lt;/p&gt;
&lt;p&gt;This is the concept that makes Redux’s time travel debugging possible.  There can only be one value for state at any given time and stepping backward though actions will show what the state was at every step.&lt;/p&gt;
&lt;p&gt;In Javascript don’t confuse &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; with immutable.  &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; will prevent you from reassigning a new object reference to that variable, but you can still change the properties of that object.  &lt;code class=&quot;language-text&quot;&gt;Object.freeze&lt;/code&gt; will prevent all the top level properties from being mutated, but if there is an object as a property then that object’s properties can still be changed unless you go traverse through and freeze each object property.&lt;/p&gt;
&lt;p&gt;I previously wrote &lt;a href=&quot;/20180608-immutability-in-javascript/&quot;&gt;an article on immutability in Javascript so you can read more on that here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typically if you studied computer science in school you learned heavily in the Object Oriented Programming, but were likely exposed to functional programming as well.  In the past few years functional programming has been growing in popularity and this definitely holds true for the Javascript community.&lt;/p&gt;
&lt;p&gt;Next we’ll discuss some functional programming tools.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplicity is prerequisite for reliability. -Edsger W. Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Pure Functions&lt;/h2&gt;
&lt;p&gt;A pure function has no side effects.  So for each input a pure function will give you the exact same result every time.  &lt;/p&gt;
&lt;p&gt;The benefit of using pure functions is that they are typically easier to debug as they are predictable in their outcome and simple to read.&lt;/p&gt;
&lt;p&gt;Examples of side effects are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an xhr call&lt;/li&gt;
&lt;li&gt;changing a variable outside of the function’s scope&lt;/li&gt;
&lt;li&gt;console log&lt;/li&gt;
&lt;li&gt;outputting to a file&lt;/li&gt;
&lt;li&gt;calling other functions with side effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s take a look at an example of a function with side effects:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const a = 1;
const a1 = () =&amp;gt; a += 1;
a1(); 
console.log(a); // 2
a1();
console.log(a); // 3&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The result of this function will give you a different result each time as every time it is called it continues to increment a because it’s operating on a variable that is not an input to itself.&lt;/p&gt;
&lt;p&gt;Let’s change our example to a pure function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const b = 1;
const b1 = (val) =&amp;gt; val += 1;
console.log(b1(b)); // 2
console.log(b1(b)); // 2&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In this case &lt;code class=&quot;language-text&quot;&gt;b1&lt;/code&gt; will give you the same result every time for any given input you pass into it unlike &lt;code class=&quot;language-text&quot;&gt;a1&lt;/code&gt; which mutates a variable outside of its own scope.  &lt;code class=&quot;language-text&quot;&gt;b1&lt;/code&gt; only operates on the variable that it takes in as an input.&lt;/p&gt;
&lt;h2&gt;Higher Order Functions&lt;/h2&gt;
&lt;p&gt;Higher order functions are functions that can accept another function as a parameter or return another function as a result.  This is how functional programming achieves reusability with a set of reusable utility functions as opposed to &lt;em&gt;Object Oriented Programming&lt;/em&gt; which locates functions and data together in classes.&lt;/p&gt;
&lt;p&gt;Higher order functions are possible in javascript because it has &lt;em&gt;first class functions&lt;/em&gt;.  Functions can be passed as parameters to other functions, assigned to variables, and returned from other functions.&lt;/p&gt;
&lt;p&gt;The array methods &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt; are examples of extremely useful and reusable higher order functions.  Once you learn to use these array methods it totally changes the way you write code, because they are fantastic.&lt;/p&gt;
&lt;p&gt;Let’s  demonstrate what a simple higher order function looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const doubleArray = (a) =&amp;gt; a.map(i =&amp;gt; i * 2);
const reverseArray = (b) =&amp;gt; b.reverse();

const compose = (a, b) =&amp;gt; (input) =&amp;gt; b(a(input));

const input = [1, 2, 3];
console.log(compose(doubleArray, reverseArray)(input)); // [6, 4, 2]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Here we define a couple of functions to operate on arrays.  The &lt;code class=&quot;language-text&quot;&gt;compose&lt;/code&gt; functions allow us to combine these two operations and gives us a function as a result.  We then can call that resulting function and pass in our &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies. — C.A.R. Hoare, The 1980 ACM Turing Award Lecture&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Functional Composition&lt;/h2&gt;
&lt;p&gt;Functional composition is combining or chaining simple functions to make up more complex functions.  Again, since Javascript has first class functions it makes it easy to apply functions to the results of other functions.&lt;/p&gt;
&lt;p&gt;This can be demonstrated using the array map, reduce, and filter methods by chaining them together:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const list = [1, 2, 6, 8];

const result = list.map(a =&amp;gt; a * 3)
  .filter(b =&amp;gt; b &amp;gt; 3)
  .reduce((sum, c) =&amp;gt; {
    sum += c;
    return sum;
  });

console.log(result); // 48&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The result of each function returns a new array and we call the next function in the chain on that resulting array.&lt;/p&gt;
&lt;p&gt;Let’s go over another example where we combine two simple functions into a single function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const triple = (a) =&amp;gt; a * 3;
const minus2 = (b) =&amp;gt; b - 2;

const tripleMinus2 = (c) =&amp;gt; triple(minus2(c));

console.log(tripleMinus2(5)); // 9
console.log(tripleMinus2(45)); // 129
console.log(tripleMinus2(678)); // 2028&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;These are trivial examples obviously, but in my experience organizing your code into small utility functions makes them easy to reuse and combine with other utility functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The object-oriented version of spaghetti code is, of course, ‘lasagna code’. Too many layers. -Roberto Waltman&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Why Your Team Should Be Doing Code Reviews]]></title><description><![CDATA[I believe that code reviews are one of the best things a development team can do for adding value to their development process.  I know from…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180613-why-you-should-be-doing-code-reviews/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180613-why-you-should-be-doing-code-reviews/</guid><pubDate>Wed, 13 Jun 2018 07:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I believe that code reviews are one of the best things a development team can do for adding value to their development process.  I know from my experience that not every development shop does reviews and those that do aren’t doing them in a way that gets maximum benefits.  In this article I’m going to outline what I think are the greatest benefits of code reviews, how to get the most value out of them, and common mistakes teams make when doing code reviews.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code is like humor. When you have to explain it, it’s bad. – Cory House&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Code Reviews&lt;/h2&gt;
&lt;p&gt;Code reviews can be done formally or informally as a vital step in the development process.  It usually takes place after a developer has completed coding and testing a feature and before their code is merged into the main branch.  This offers an opportunity for the rest of the team to look over their work.  Now the goal of the review isn’t to give the rest of the opportunity to skewer the writer for all the mistakes they made, but is mean to help share knowledge through the team.  Programming is after all a team sport.  The best teams know how to do reviews productively.&lt;/p&gt;
&lt;p&gt;Now especially for more junior developers but this happens to senior developers as well.  There can be some fear in sharing your work with the rest of the group.  I’ll point you to any of the many articles about Imposter Syndrome out there on programming blogs.  This is a natural fear, but becomes easier to overcome when you realize that everybody is in the same boat.  No matter what your experience level is you have something unique to contribute to the team and to review discussions.  So don’t let a review intimidate you.  It is an opportunity to not only correct mistakes, but also to learn and grow as a team.&lt;/p&gt;
&lt;p&gt;Let’s start by going through a list of benefits of doing code reviews.&lt;/p&gt;
&lt;h2&gt;1. Extra set(s) of eyes on your code.&lt;/h2&gt;
&lt;p&gt;Human beings make mistakes.  It’s a fact of life.  No one is perfect.  It’s why we have QA and user testing.  For that extra level of assurance that we are catching our mistakes as early as possible when they are the cheapest to fix.  Everyone thinks differently so it is very helpful to have others on your team look at your code because they’ll likely think of scenarios or corner cases that you didn’t think about while you were writing it.  &lt;/p&gt;
&lt;h2&gt;2. A greater shared understanding.&lt;/h2&gt;
&lt;p&gt;If you’ve ever worked on a team where everyone is siloed to their own little fiefdoms you know that is not a good situation.  Especially when someone decides to leave the team.  Now because no one else left understands what they were working on they just have to pray that everything keeps working or rewrite their work.&lt;/p&gt;
&lt;p&gt;After a code review all of the reviewers should be able to answer these questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the code trying to accomplish?&lt;/li&gt;
&lt;li&gt;How does it accomplish it?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reviewers should ask as many clarifying questions as necessary for them to understand what is going on if something is unclear.&lt;/p&gt;
&lt;h2&gt;3. Share individual knowledge with the team.&lt;/h2&gt;
&lt;p&gt;There is a lot to learn in our field and the goal of everyone should be to continually learn.  Everyone is busy and everyone gets exposed to different articles or podcasts to stay current and the more you can share that knowledge with others the stronger your team will be.  Code reviews are a great opportunity to share the knowledge you have or benefit from the knowledge of others.  Someone may offer up an obscure language feature that reduces the amount of code you write while making it easier to understand.  Someone may offer up a totally different way to do solve the problem that hadn’t even crossed your mind.  Either way the more great minds you have thinking about solving a problem the more likely it is that you’re going to arrive at an optimal solution.&lt;/p&gt;
&lt;h2&gt;4. Team chemistry&lt;/h2&gt;
&lt;p&gt;Code reviews done properly can be a great exercise for team building.  Done improperly it can also have the opposite effect.  There are two sides to this.  If your code is being reviewed you have to remove your ego from your code and not take anything that is said about it personally.  Everyone is trying to achieve the same goal after all.  The other side is any comments by the reviewers should be critiquing the code and not the writer.  &lt;em&gt;“How could you be this stupid?”&lt;/em&gt; would be an example of a comment that would probably not endear you to your teammates and is not particularly helpful if the goal is to improve code quality.  Instead of assuming stupidity on the part of someone else is to ask clarifying questions because you may not fully understand their situation.  The result will be they enlighten you to their special circumstances or your questions may lead them to rethink their approach.&lt;/p&gt;
&lt;h2&gt;5. Craft the team’s best practices&lt;/h2&gt;
&lt;p&gt;Reviews often spur discussions on best practices.  This is a good opportunity to get input or take a vote from everyone on which best practices they want to use for the team going forward.  That way if the same issues comes up again they can fall back on the decision reached previously by the team or it may cause the team to re-think what their previous decision.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I’ll also outline common mistakes I see with the way teams do reviews.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before software can be reusable it first has to be usable. – Ralph Johnson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Skipping them altogether&lt;/h2&gt;
&lt;p&gt;Now that there are great Git tools like Github or Bitbucket that make it super simple to do peer reviews and share code changes with the team there really is no excuse to skip this step.  I know there are always managers who want to skip every step besides writing code because they don’t see the benefit, but as a developer you should be an advocate for reviews.  It really is the simplest way to improve the overall code quality produced by your team.&lt;/p&gt;
&lt;h2&gt;Having a single person review everyone’s code&lt;/h2&gt;
&lt;p&gt;This does nothing to remove the single point of failure as discussed above.  You’re also at the same time creating a bottleneck for getting code merged in especially if it is a large team with a lot of code to review.  It’s very difficult for one person to keep up with that and they likely won’t be able to as in depth a review on all the code as if they were sharing the reviewing responsibilities with their team.&lt;/p&gt;
&lt;h2&gt;Using reviews as punishment&lt;/h2&gt;
&lt;p&gt;It’s never a good situation when more inexperienced programmers get singled out for reviews and the more senior members of the team don’t have to follow the same protocol.  This creates a hierarchy unnecessarily and can easily wreck a team’s chemistry.  Instead it’s better if everyone is subject to the same process.  After all senior developers make mistakes too just like everyone else.&lt;/p&gt;
&lt;p&gt;Also if someone feels their code is continually singled out for reviews they’re going to be more and more reluctant to submit to reviews and will likely be looking for a new team.&lt;/p&gt;
&lt;h2&gt;Waiting to long to do reviews&lt;/h2&gt;
&lt;p&gt;You get the most benefit out of a review by doing it right after the code has been written.  I’ve seen teams that wait until a release is finished and there is no way to do an effective review on that massive landslide of code.  By that point everyone has moved on to other features/problems so it isn’t fresh in their minds what they were trying to accomplish.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand. – Martin Fowler (author and speaker on software development)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;I’m a big fan of code reviews done properly and hope this article gives you some practical advice on how your team can benefit from incorporating code reviews as a vital step in your development process.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Immutability in Javascript]]></title><description><![CDATA[I’m currently working on a project that uses React and Redux.  Both of these js libraries enforce immutability of objects as they won’t let…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180608-immutability-in-javascript/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180608-immutability-in-javascript/</guid><pubDate>Fri, 08 Jun 2018 22:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’m currently working on a project that uses React and Redux.  Both of these js libraries enforce immutability of objects as they won’t let you mutate state.  I’m going to discuss exactly what that means and show examples of how to achieve immutability cleanly with ES6 features.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s the simple truth: you can’t innovate on products without first innovating the way you build them.
— Alex Schleifer, The Way We Build&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Immutable vs Mutable&lt;/h2&gt;
&lt;p&gt;Let’s start with the basic definition.  &lt;em&gt;Immutable&lt;/em&gt; means once an object is assigned to a variable it doesn’t change.  So when you want to change state in React or Redux you don’t mutate an object in state.  Instead you build a new object instead and that new object reference replaces the old as the current state.  Achieving this can seem difficult if you aren’t up to speed with modern js practices.  This is much easier to achieve using ES6 features which I will demonstrate below.&lt;/p&gt;
&lt;p&gt;Strings in Javascript are immutable objects.  If you add one string to another it does not change the current string.  It will create a new string object and assign the reference to the variable storing the result.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Immutable data cannot be changed once created, leading to much simpler application development, no defensive copying, and enabling advanced memoization and change detection techniques with simple logic. Persistent data presents a mutative API which does not update the data in-place, but instead always yields new updated data.
— Immutable.js page&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Mutable&lt;/em&gt; is just the opposite.  You have an object reference in memory and when the state of the app changes you update properties of that object to reflect the new state.  Achieving this in Javascript is very easy.  However there are drawbacks.  I know it has been my experience that as projects grow the amount of state that is held in the app grows along with it.  As this is happening the number of bugs that are difficult to resolve start to increase.  Usually the issue is the objects kept in the state are being mutated in several different places which makes it hard to track exactly where to fix it.  And if it does fix one bug then how many others does it create simultaneously?&lt;/p&gt;
&lt;p&gt;This is the main advantage of making sure objects in state are immutable.  I’ve seen in building apps this way that it makes state changes really easy to debug.  Code for state changes is simple and easy to pinpoint if something is not correct.  Especially when &lt;a href=&quot;https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en&quot;&gt;you use the Redux DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s take a look at examples of how to achieve immutability using ES6 features.  The examples will follow the typical Redux reducer pattern.&lt;/p&gt;
&lt;h2&gt;Spread Operator&lt;/h2&gt;
&lt;p&gt;The spread operator is magic in my opinion.  It does a great job of keeping your code concise and saves a lot of work.  Take the example below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initalState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; FETCH_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Rather than assigning &lt;code class=&quot;language-text&quot;&gt;pizzaList&lt;/code&gt; to state we use the spread operator to assign all the properties of state and the &lt;code class=&quot;language-text&quot;&gt;pizzaList&lt;/code&gt; property to a new object reference which is returned by the reducer.  This can also be achieved using &lt;code class=&quot;language-text&quot;&gt;Object.assign&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initalState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; FETCH_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Same result but my preference is to use the spread operator as it keeps things a bit more concise and explicit.  All just personal preference though.&lt;/p&gt;
&lt;p&gt;The same result can be achieved if you want to make the property that is changed dynamic.  The following will assign whichever property that it receives in &lt;code class=&quot;language-text&quot;&gt;action.field&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initalState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; FETCH_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The spread operator also comes in handy for adding a new item to an array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ADD_PIZZA&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;newPizza&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Arrays - map/filter/reduce&lt;/h2&gt;
&lt;p&gt;It’s also very handy to use ES6 array operations (map/filter/reduce) since they all return new array references.  Let’s take a look at some examples below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updating all items in a list&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; INCREMENT_ALL_PIZZA_ORDER_COUNT&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pizza &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;pizza&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; orderCount&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;orderCount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This constructs a new &lt;code class=&quot;language-text&quot;&gt;pizzaList&lt;/code&gt; by constructing a new object in the map for each item and updating the &lt;code class=&quot;language-text&quot;&gt;orderCount&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Removing an item from a list&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; REMOVE_PIZZA&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pizza &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;removeId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This creates a new array by simply filtering out the object with the id that was removed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updating an item in a list:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ADD_PIZZA&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        pizzaList&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pizzaList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pizza &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;updateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;updatedPizza&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This updates an item in the list by first filtering out the updated id from the original list and then using the result plus the updated object to return a new array.&lt;/p&gt;
&lt;h2&gt;Immutable JS&lt;/h2&gt;
&lt;p&gt;Facebook has a js library build around immutable principles called immutable.js.  I highly recommend you &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;check out their page if you’d like to learn more&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Much of what makes application development difficult is tracking mutation and maintaining state. Developing with immutable data encourages you to think differently about how data flows through your application.
— Immutable.js page&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We’ve talked about the principles behind immutability and some ES6 tools for achieving it.  Hopefully this gives you a clearer understanding as it an increasingly relevant topic in modern Javascript.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A New Beginning...]]></title><description><![CDATA[New Blog! If you’ve checked out my blog before you’ll likely notice things look pretty different.  I’m currently in the middle of the…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180608-a-new-beginning/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180608-a-new-beginning/</guid><pubDate>Fri, 08 Jun 2018 15:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;New Blog!&lt;/h2&gt;
&lt;p&gt;If you’ve checked out my blog before you’ll likely notice things look pretty different.  I’m currently in the middle of the process of re-platforming my blog away from Wordpress and now will be using Gatsby.  I’ve started the process of porting over my previous posts and will continue to do so until everything has been moved over.&lt;/p&gt;
&lt;h2&gt;Why Gatsby?&lt;/h2&gt;
&lt;p&gt;Good question.&lt;/p&gt;
&lt;p&gt;If you haven’t heard of &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; yet it’s a static site generator that uses React.js.  The main reason I switched to Gatsby is that it is blazing fast.  And it is very easy to use &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; to deploy a Gatsby site to Github pages.  So another win is that hosting will be free.  Not that it was a lot before, but free beats cheap in my book.&lt;/p&gt;
&lt;p&gt;If you are interested in learning to do this yourself &lt;a href=&quot;https://medium.freecodecamp.org/how-to-write-a-blog-using-gatsby-from-your-phone-e92a99851a04&quot;&gt;I recommend you check out this article for details on how&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Stay Tuned&lt;/h2&gt;
&lt;p&gt;One of the reasons I’m excited about this move is it makes it much easier for me to deliver new content as I can focus less on administration and more on creating content.  So keep an eye out for more coming soon!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functional Stateless Components in React]]></title><description><![CDATA[In this article I’m going to explain functional stateless React components using simple code examples. Now this may sound abstract, but the…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180409-functional-stateless-components-in-react/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180409-functional-stateless-components-in-react/</guid><pubDate>Mon, 09 Apr 2018 22:02:52 GMT</pubDate><content:encoded>&lt;p&gt;In this article I’m going to explain functional stateless React components using simple code examples. Now this may sound abstract, but the idea behind this is very simple. The idea is that functional stateless components are just displaying data that is passed to them through props. That is it. No state, no methods, just plugging data into a template and returning a component to render.&lt;/p&gt;
&lt;p&gt;When you see components in React they are normally declared in one of two ways. The first extends &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class FancyComponent extends React.Component { 
    constructor(props) { 
      super(props); 
    } 
    ...
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The example uses ES6 class notation to extend &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt;. You use this method when you are creating a component that does one of the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses state&lt;/li&gt;
&lt;li&gt;Uses a life cycle method (i.e. &lt;em&gt;componentDidMount&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In all likelihood you will be using the class approach for your container Components that hold a fair amount of logic and are composed of presentational components. For the lower level building blocks you can simply declare a function that returns the component that you want to display like the following example. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function NotSoFancyComponent(props) { 
  const { name, city, } = props; 
  return &amp;lt;div&amp;gt;Hello, {name} from {city}!&amp;lt;/div&amp;gt; 
} &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the &lt;code class=&quot;language-text&quot;&gt;NotSoFancyComponent&lt;/code&gt; we deconstruct the &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; object into the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;city&lt;/code&gt; constants. &lt;em&gt;(You don’t have to do it this way. It is perfectly fine to use {props.name} that is just my preference.)&lt;/em&gt; This is an example of a functional stateless component. No state, no life cycle methods required. Just taking in data as props and plugging it into a component. &lt;/p&gt;
&lt;p&gt;We would use the component as follows. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;NotSoFancyComponent name=&amp;quot;Bob&amp;quot; city=&amp;quot;Kansas City&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We can also make this declaration more succinct using an ES6 arrow function. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const NotSoFancyComponent = (props) =&amp;gt; &amp;lt;div&amp;gt;Hello, {props.name} from {props.city}!&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The nice thing about keeping these components very simple is they can easily be re-used across your application or possibly multiple applications in a component library and you can be assured that they will display the same behavior everywhere. Cleaner code and better performance are two additional benefits to using this approach. &lt;/p&gt;
&lt;p&gt;And if you happen to come to a point where you need to use state or a life cycle method it is very easy to refactor these functions to do so. Let’s say we want to leverage the &lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt; life cycle hook with our example. This is the code changes we would need to make to make it work. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class NotSoFancyComponent extends React.Component { 
  constructor(props) { 
    super(props); 
  } 
  
  componentDidMount() { 
    console.log(&amp;#39;NotSoFancyComponent did mount!&amp;#39;); 
  } 
  
  render() { 
    const { name, city, } = this.props; return &amp;lt;div&amp;gt;Hello, {name} from {city}!&amp;lt;/div&amp;gt; 
  } 
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;No drastic changes required. The declaration changes to a class extending &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt; and then move the function into the render function. &lt;/p&gt;
&lt;p&gt;I hope this enhances your understanding of functional stateless components as it is a foundational concept for building applications in React.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript's call, bind, and apply - A Quick Explanation]]></title><description><![CDATA[If you don’t use JavaScript’s call, bind, and apply regularly you might not be aware of what they do and how to use these native functions…]]></description><link>https://github.com/mbrown333/mbrown333.github.io/20180409-javascripts-call-bind-and-apply-a-quick-explanation/</link><guid isPermaLink="false">https://github.com/mbrown333/mbrown333.github.io/20180409-javascripts-call-bind-and-apply-a-quick-explanation/</guid><pubDate>Mon, 09 Apr 2018 03:20:04 GMT</pubDate><content:encoded>&lt;p&gt;If you don’t use JavaScript’s call, bind, and apply regularly you might not be aware of what they do and how to use these native functions. I can remember for the longest time being aware they existed, but not really understanding what they were exactly. Having a good grasp on how these work will give you a deeper understanding of the JavaScript language. And if nothing else these functions tend to be a popular subject of JavaScript interview questions so being aware of how they work can still help you out even if you don’t use them regularly. &lt;/p&gt;
&lt;p&gt;Bind, call, and apply are all part of the prototype object for all JavaScript functions. The reason these calls can come in handy is JavaScript’s &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;. Let’s take a look at some code. When you’re calling an object’s function and the object is the left of the dot as below then that object will be &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; when the &lt;code class=&quot;language-text&quot;&gt;printPerson&lt;/code&gt; function is called. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
    printPerson() { 
      console.log(`${this.name} is ${this.age}`); 
      } 
    }; 

    person.printPerson(); // Bob is 21 
})(); &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This works fine if you’re working with objects in an object oriented fashion where data and functionality are grouped together in the object. If you’re using a functional approach then this changes things. If we move the &lt;code class=&quot;language-text&quot;&gt;printPerson&lt;/code&gt; function out of the &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt; object and declare it as a function elsewhere then we’ve lost the ability to use &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; in the function. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
  }; 
  
  function printPerson() { 
    console.log(`${this.name} is ${this.age}`); 
  } 
  
  printPerson(); // FAILS! 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We could change the function to pass in person as a parameter or we can use &lt;code class=&quot;language-text&quot;&gt;call&lt;/code&gt; to specify to the function what the &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; context should be. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Bob&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;printPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
  
  printPerson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Bob is 21 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And voila, we passed in the &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt; object and our &lt;code class=&quot;language-text&quot;&gt;printPerson&lt;/code&gt; function now knows to use this object as the &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; context. You can also pass parameters in addition to the context with call as below. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
  };

  function printPerson(city, state) { 
    console.log(`${this.name} is ${this.age} from ${city}, ${state}`); 
  }

  printPerson.call(person, &amp;#39;Chicago&amp;#39;, &amp;#39;IL&amp;#39;); // Bob is 21 from Chicago, IL 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is the same thing as before just demonstrating that any number of parameters can be passed in after the context. The context is always the first parameter and then all others follow after.&lt;/p&gt;
&lt;p&gt;That’s the basic idea with call, now what about bind?&lt;/p&gt;
&lt;p&gt;Bind is actually pretty much the same as call except the function won’t be invoked immediately. It’s just a way to defer execution until later. If you’ve used React this will look familiar to you as bind is often used to bind functions to React Components.&lt;/p&gt;
&lt;p&gt;Let’s update our code example to use bind this time. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { 
    age: 21, 
    name: &amp;#39;Bob&amp;#39;, 
  }; 
  const printPersonDeferred = printPerson.bind(person); 
  
  function printPerson() { 
    console.log(`${this.name} is ${this.age}`); 
  } 
  
  printPersonDeferred(); // Bob is 21 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And then expand on this to demonstrate parameters. This time we pass the parameters in when we make the deferred execution call rather than at the time bind is called. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { age: 21, name: &amp;#39;Bob&amp;#39;, }; 
  
  const printPersonDeferred = printPerson.bind(person); 
  
  function printPerson(city, state) { 
    console.log(`${this.name} is ${this.age} from ${city}, ${state}`); 
  } 
  
  printPersonDeferred(&amp;#39;Chicago&amp;#39;, &amp;#39;IL&amp;#39;); // Bob is 21 from Chicago, IL 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;All right we have bind and call down. Let’s move on to apply. Apply is practically the same as call except apply requires you to pass in your parameters after the this context as an array. This is how we would need to modify our code to use apply below. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(function() { 
  const person = { age: 21, name: &amp;#39;Bob&amp;#39;, }; 
  
  function printPerson(city, state) { 
    console.log(`${this.name} is ${this.age} from ${city}, ${state}`); 
  } 
  
  printPerson.apply(person, [&amp;#39;Chicago&amp;#39;, &amp;#39;IL&amp;#39;]); // Bob is 21 from Chicago, IL 
})();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So you see when you use apply JavaScript unpacks your arguments array into the parameter variables of the function you are calling with apply.&lt;/p&gt;</content:encoded></item></channel></rss>